const mysql = require('mysql2/promise');
require('dotenv').config();

async function fixDashboard() {
  try {
    console.log('===== KI·ªÇM TRA V√Ä KH·∫ÆC PH·ª§C L·ªñI API DASHBOARD =====');
    
    // K·∫øt n·ªëi database
    console.log('üîÑ ƒêang k·∫øt n·ªëi database...');
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME
    });
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // Ki·ªÉm tra c√°c truy v·∫•n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong API dashboard
    console.log('üîÑ ƒêang ki·ªÉm tra truy v·∫•n l·∫•y t·ªïng s·ªë ng∆∞·ªùi d√πng...');
    try {
      const [userCount] = await connection.query('SELECT COUNT(*) as count FROM users');
      console.log('‚úÖ Truy v·∫•n l·∫•y t·ªïng s·ªë ng∆∞·ªùi d√πng th√†nh c√¥ng:', userCount[0].count);
    } catch (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n ng∆∞·ªùi d√πng:', error.message);
    }
    
    console.log('üîÑ ƒêang ki·ªÉm tra truy v·∫•n l·∫•y t·ªïng s·ªë s·∫£n ph·∫©m...');
    try {
      const [productCount] = await connection.query('SELECT COUNT(*) as count FROM school_supplies');
      console.log('‚úÖ Truy v·∫•n l·∫•y t·ªïng s·ªë s·∫£n ph·∫©m th√†nh c√¥ng:', productCount[0].count);
    } catch (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n s·∫£n ph·∫©m:', error.message);
    }
    
    console.log('üîÑ ƒêang ki·ªÉm tra truy v·∫•n l·∫•y t·ªïng s·ªë ƒë∆°n h√†ng...');
    try {
      const [orderCount] = await connection.query('SELECT COUNT(*) as count FROM orders');
      console.log('‚úÖ Truy v·∫•n l·∫•y t·ªïng s·ªë ƒë∆°n h√†ng th√†nh c√¥ng:', orderCount[0].count);
    } catch (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n ƒë∆°n h√†ng:', error.message);
    }
    
    console.log('üîÑ ƒêang ki·ªÉm tra truy v·∫•n l·∫•y t·ªïng doanh thu...');
    try {
      const [revenue] = await connection.query('SELECT SUM(total_amount) as total FROM orders');
      console.log('‚úÖ Truy v·∫•n l·∫•y t·ªïng doanh thu th√†nh c√¥ng:', revenue[0].total || 0);
    } catch (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n doanh thu:', error.message);
    }
    
    console.log('üîÑ ƒêang ki·ªÉm tra truy v·∫•n l·∫•y 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t...');
    try {
      const [topProducts] = await connection.query(`
        SELECT p.id, p.name, p.unit_price, SUM(oi.quantity) as total_sold
        FROM school_supplies p
        JOIN order_items oi ON p.id = oi.product_id
        GROUP BY p.id
        ORDER BY total_sold DESC
        LIMIT 5
      `);
      console.log('‚úÖ Truy v·∫•n l·∫•y 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t th√†nh c√¥ng:', topProducts.length);
    } catch (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n s·∫£n ph·∫©m b√°n ch·∫°y:', error.message);
    }
    
    console.log('üîÑ ƒêang ki·ªÉm tra truy v·∫•n l·∫•y 5 ƒë∆°n h√†ng g·∫ßn nh·∫•t...');
    try {
      const [recentOrders] = await connection.query(`
        SELECT o.id, o.user_id, u.name as user_name, o.total_amount, o.status, o.created_at
        FROM orders o
        JOIN users u ON o.user_id = u.id
        ORDER BY o.created_at DESC
        LIMIT 5
      `);
      console.log('‚úÖ Truy v·∫•n l·∫•y 5 ƒë∆°n h√†ng g·∫ßn nh·∫•t th√†nh c√¥ng:', recentOrders.length);
    } catch (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n ƒë∆°n h√†ng g·∫ßn nh·∫•t:', error.message);
    }
    
    // Kh·∫Øc ph·ª•c n·∫øu c√≥ l·ªói trong b·∫£ng order_items ho·∫∑c price
    console.log('üîÑ ƒêang ki·ªÉm tra d·ªØ li·ªáu trong order_items...');
    try {
      const [orderItemsCount] = await connection.query('SELECT COUNT(*) as count FROM order_items');
      if (orderItemsCount[0].count === 0) {
        console.log('‚ö†Ô∏è B·∫£ng order_items kh√¥ng c√≥ d·ªØ li·ªáu, th√™m d·ªØ li·ªáu m·∫´u...');
        
        // L·∫•y ID c·ªßa ƒë∆°n h√†ng ƒë·∫ßu ti√™n
        const [orders] = await connection.query('SELECT id FROM orders LIMIT 1');
        if (orders.length > 0) {
          const orderId = orders[0].id;
          
          // L·∫•y ID c·ªßa s·∫£n ph·∫©m
          const [products] = await connection.query('SELECT id FROM school_supplies LIMIT 2');
          if (products.length >= 2) {
            // Th√™m c√°c item v√†o ƒë∆°n h√†ng
            await connection.query(`
              INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
              (?, ?, 3, 5000), 
              (?, ?, 2, 15000)
            `, [orderId, products[0].id, orderId, products[1].id]);
            
            console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u v√†o order_items th√†nh c√¥ng');
          }
        }
      } else {
        console.log('‚úÖ B·∫£ng order_items ƒë√£ c√≥ d·ªØ li·ªáu:', orderItemsCount[0].count);
        
        // Ki·ªÉm tra c·ªôt price
        try {
          const [priceCheck] = await connection.query('SELECT price FROM order_items LIMIT 1');
          console.log('‚úÖ C·ªôt price ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
        } catch (error) {
          console.error('‚ùå L·ªói khi truy v·∫•n c·ªôt price:', error.message);
          console.log('üîÑ ƒêang c·∫≠p nh·∫≠t gi√° tr·ªã cho c·ªôt price...');
          
          // C·∫≠p nh·∫≠t gi√° tr·ªã cho c·ªôt price d·ª±a tr√™n unit_price c·ªßa s·∫£n ph·∫©m
          await connection.query(`
            UPDATE order_items oi
            JOIN school_supplies p ON oi.product_id = p.id
            SET oi.price = p.unit_price
            WHERE oi.price IS NULL OR oi.price = 0
          `);
          console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° tr·ªã cho c·ªôt price');
        }
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra b·∫£ng order_items:', error.message);
    }
    
    console.log('===== HO√ÄN TH√ÄNH KI·ªÇM TRA V√Ä KH·∫ÆC PH·ª§C L·ªñI API DASHBOARD =====');
    await connection.end();
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

fixDashboard(); 