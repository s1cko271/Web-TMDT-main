import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import axios from 'axios';
// import QRCode from 'qrcode.react';
import './QRCodePayment.css';

// Component gi·∫£ l·∫≠p QR Code ƒë·ªÉ kh√¥ng ph·ª• thu·ªôc v√†o th∆∞ vi·ªán b√™n ngo√†i
const QRCodeFallback = ({ value, size = 180 }) => {
  return (
    <div 
      style={{ 
        width: size, 
        height: size, 
        background: '#f0f0f0', 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        flexDirection: 'column',
        border: '1px solid #ddd',
        boxSizing: 'border-box'
      }}
    >
      <div style={{ fontSize: '40px', marginBottom: '10px' }}>üì±</div>
      <div style={{ fontSize: '12px', textAlign: 'center', padding: '0 10px' }}>
        M√£ QR m·∫´u <br />
        (Ch·ªâ ƒë·ªÉ minh h·ªça)
      </div>
    </div>
  );
};

const QRCodePaymentNew = ({ paymentMethod, amount, onPaymentComplete }) => {
  const { t } = useTranslation();
  const [qrData, setQrData] = useState('');
  const [transactionId, setTransactionId] = useState('');
  const [status, setStatus] = useState('pending'); // pending, processing, completed, failed
  const [countdown, setCountdown] = useState(300); // 5 ph√∫t ƒë·∫øm ng∆∞·ª£c
  const [timeLeft, setTimeLeft] = useState('');
  
  // X√°c ƒë·ªãnh th√¥ng tin d·ª±a tr√™n ph∆∞∆°ng th·ª©c thanh to√°n
  const getPaymentInfo = () => {
    switch(paymentMethod) {
      case 'momo':
        return {
          title: 'MoMo',
          color: '#ae2070',
          instructions: t('checkoutPage.qrInstructions.momo', 'Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng MoMo ƒë·ªÉ thanh to√°n')
        };
      case 'zalopay':
        return {
          title: 'ZaloPay',
          color: '#0068ff',
          instructions: t('checkoutPage.qrInstructions.zalopay', 'Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ZaloPay ƒë·ªÉ thanh to√°n')
        };
      case 'vnpay':
        return {
          title: 'VNPAY',
          color: '#e50019',
          instructions: t('checkoutPage.qrInstructions.vnpay', 'Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng VNPAY ƒë·ªÉ thanh to√°n')
        };
      default:
        return null;
    }
  };
  
  useEffect(() => {
    // T·∫°o QR Code v√† th√¥ng tin giao d·ªãch
    const initializeTransaction = async () => {
      try {
        // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API c·ªßa c·ªïng thanh to√°n ƒë·ªÉ t·∫°o giao d·ªãch
        const transactionData = {
          amount: amount,
          paymentMethod: paymentMethod,
          description: `Thanh to√°n ƒë∆°n h√†ng qua ${paymentMethod === 'momo' ? 'MoMo' : 'ZaloPay'}`
        };
        
        // Gi·∫£ l·∫≠p vi·ªác g·ªçi API c·ªïng thanh to√°n
        // const response = await axios.post('/api/payments/create-transaction', transactionData);
        
        // Thay v√¨ g·ªçi API th·ª±c, ch√∫ng ta t·∫°o d·ªØ li·ªáu m·∫´u
        const mockTransactionId = 'TX' + Date.now();
        setTransactionId(mockTransactionId);
        
        // T·∫°o d·ªØ li·ªáu QR code - Trong th·ª±c t·∫ø, c·ªïng thanh to√°n s·∫Ω cung c·∫•p d·ªØ li·ªáu n√†y
        const qrContent = `${paymentMethod}://pay?amount=${amount}&transactionId=${mockTransactionId}&appId=YOURAPPID`;
        setQrData(qrContent);
        setStatus('processing');
        
        // B√°o cho component cha bi·∫øt v·ªÅ ID giao d·ªãch
        // onPaymentInitialized(mockTransactionId);
      } catch (error) {
        console.error('L·ªói khi t·∫°o giao d·ªãch:', error);
        setStatus('failed');
      }
    };
    
    initializeTransaction();
  }, [paymentMethod, amount]);
  
  // Theo d√µi tr·∫°ng th√°i thanh to√°n
  useEffect(() => {
    if (!transactionId || status !== 'processing') return;
    
    const checkPaymentStatus = async () => {
      try {
        // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, g·ªçi API ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
        // const response = await axios.get(`/api/payments/status/${transactionId}`);
        
        // Gi·∫£ l·∫≠p vi·ªác ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
        // Trong ·ª©ng d·ª•ng th·ª±c, d√πng API c·ªïng thanh to√°n ƒë·ªÉ ki·ªÉm tra
        
        // Ch·ªâ ƒë·ªÉ demo, ch√∫ng ta s·∫Ω x√°c nh·∫≠n thanh to√°n khi ng∆∞·ªùi d√πng nh·∫•p v√†o n√∫t "X√°c nh·∫≠n ƒë√£ thanh to√°n"
      } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:', error);
      }
    };
    
    // Ki·ªÉm tra tr·∫°ng th√°i m·ªói 5 gi√¢y
    const intervalId = setInterval(checkPaymentStatus, 5000);
    
    return () => clearInterval(intervalId);
  }, [transactionId, status]);
  
  // X·ª≠ l√Ω ƒë·∫øm ng∆∞·ª£c th·ªùi gian
  useEffect(() => {
    if (status !== 'processing') return;
    
    const timer = setInterval(() => {
      setCountdown(prevCount => {
        if (prevCount <= 1) {
          clearInterval(timer);
          setStatus('failed');
          return 0;
        }
        return prevCount - 1;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [status]);
  
  // Format th·ªùi gian ƒë·∫øm ng∆∞·ª£c
  useEffect(() => {
    const minutes = Math.floor(countdown / 60);
    const seconds = countdown % 60;
    setTimeLeft(`${minutes}:${seconds < 10 ? '0' : ''}${seconds}`);
  }, [countdown]);
  
  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n ƒë√£ thanh to√°n (ch·ªâ cho m·ª•c ƒë√≠ch demo)
  const handleConfirmPayment = async () => {
    try {
      // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω kh√¥ng c·∫ßn n√∫t n√†y
      // v√¨ tr·∫°ng th√°i s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông b·ªüi webhook t·ª´ c·ªïng thanh to√°n
      
      // Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      const mockOrderId = 'ORD' + Date.now();
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n trong ·ª©ng d·ª•ng
      setStatus('completed');
      
      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong c∆° s·ªü d·ªØ li·ªáu
      // await axios.put(`/api/payments/${transactionId}/confirm`);
      
      // Th√¥ng b√°o cho component cha
      if (onPaymentComplete) {
        onPaymentComplete(mockOrderId);
      }
    } catch (error) {
      console.error('L·ªói khi x√°c nh·∫≠n thanh to√°n:', error);
      setStatus('failed');
    }
  };
  
  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy giao d·ªãch
  const handleCancelPayment = () => {
    setStatus('failed');
  };
  
  const paymentInfo = getPaymentInfo();
  
  if (!paymentInfo) return null;
  
  return (
    <div className="qr-payment-container">
      <h3 className="qr-payment-title" style={{ color: paymentInfo.color }}>
        {t('checkoutPage.payWith', 'Thanh to√°n v·ªõi')} {paymentInfo.title}
      </h3>
      
      {status === 'pending' && (
        <div className="qr-payment-loading">
          <div className="spinner"></div>
          <p>ƒêang t·∫°o m√£ QR...</p>
        </div>
      )}
      
      {status === 'processing' && (
        <div className="qr-payment-content">
          <div className="qr-code-wrapper">
            <QRCodeFallback value={qrData} size={180} />
          </div>
          
          <div className="qr-payment-instructions">
            <div className="qr-payment-amount">
              <span>S·ªë ti·ªÅn:</span> <strong>{amount.toLocaleString('vi-VN')}ƒë</strong>
            </div>
            
            <div className="qr-payment-timer">
              <span>M√£ QR h·∫øt h·∫°n sau:</span> <strong>{timeLeft}</strong>
            </div>
            
            <ol className="qr-payment-steps">
              <li>M·ªü ·ª©ng d·ª•ng {paymentInfo.title} tr√™n ƒëi·ªán tho·∫°i</li>
              <li>Ch·ªçn "Qu√©t m√£ QR"</li>
              <li>Qu√©t m√£ QR hi·ªÉn th·ªã b√™n c·∫°nh</li>
              <li>X√°c nh·∫≠n thanh to√°n tr√™n ·ª©ng d·ª•ng</li>
            </ol>
            
            <div className="qr-payment-buttons">
              <button className="qr-payment-confirm-btn" onClick={handleConfirmPayment}>
                X√°c nh·∫≠n ƒë√£ thanh to√°n
              </button>
              <button className="qr-payment-cancel-btn" onClick={handleCancelPayment}>
                H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}
      
      {status === 'completed' && (
        <div className="qr-payment-success">
          <div className="success-icon">‚úì</div>
          <h3>Thanh to√°n th√†nh c√¥ng!</h3>
          <p>M√£ giao d·ªãch: {transactionId}</p>
          <p className="payment-info">ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
        </div>
      )}
      
      {status === 'failed' && (
        <div className="qr-payment-failed">
          <div className="failed-icon">‚úï</div>
          <h3>Thanh to√°n th·∫•t b·∫°i</h3>
          <p>ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh thanh to√°n ho·∫∑c phi√™n giao d·ªãch ƒë√£ h·∫øt h·∫°n.</p>
          <p>Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n kh√°c.</p>
        </div>
      )}
    </div>
  );
};

export default QRCodePaymentNew;