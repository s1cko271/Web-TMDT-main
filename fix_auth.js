const mysql = require('mysql2/promise');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

async function fixAuth() {
  try {
    console.log('===== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA V√Ä S·ª¨A L·ªñI X√ÅC TH·ª∞C =====');
    
    // 1. K·∫øt n·ªëi database
    console.log('üîÑ ƒêang k·∫øt n·ªëi database...');
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME
    });
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    
    // 2. Ki·ªÉm tra b·∫£ng users c√≥ t·ªìn t·∫°i kh√¥ng
    console.log('üîÑ ƒêang ki·ªÉm tra b·∫£ng users...');
    try {
      const [tables] = await connection.query('SHOW TABLES LIKE "users"');
      if (tables.length === 0) {
        console.log('‚ùå B·∫£ng users kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o...');
        await connection.query(`
          CREATE TABLE users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255),
            email VARCHAR(255) NOT NULL UNIQUE,
            password VARCHAR(255) NOT NULL,
            address VARCHAR(255),
            phone VARCHAR(20),
            is_admin BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          )
        `);
        console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng users th√†nh c√¥ng');
      } else {
        console.log('‚úÖ B·∫£ng users ƒë√£ t·ªìn t·∫°i');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra b·∫£ng users:', error.message);
    }

    // 3. Ki·ªÉm tra v√† t·∫°o t√†i kho·∫£n admin
    console.log('üîÑ ƒêang ki·ªÉm tra t√†i kho·∫£n admin...');
    const [users] = await connection.query(
      'SELECT * FROM users WHERE email = ?',
      ['admin@example.com']
    );

    if (users.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin, ƒëang t·∫°o...');
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('admin123', salt);
      
      await connection.query(
        'INSERT INTO users (name, email, password, is_admin) VALUES (?, ?, ?, ?)',
        ['Admin', 'admin@example.com', hashedPassword, true]
      );
      console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin th√†nh c√¥ng');
    } else {
      console.log('‚úÖ T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i');
      
      // Ki·ªÉm tra quy·ªÅn admin
      if (!users[0].is_admin) {
        console.log('‚ùå T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn admin, ƒëang c·∫≠p nh·∫≠t...');
        await connection.query(
          'UPDATE users SET is_admin = ? WHERE email = ?',
          [true, 'admin@example.com']
        );
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t quy·ªÅn admin th√†nh c√¥ng');
      }
      
      // Ki·ªÉm tra t√™n
      if (!users[0].name) {
        console.log('‚ùå T√†i kho·∫£n kh√¥ng c√≥ t√™n, ƒëang c·∫≠p nh·∫≠t...');
        await connection.query(
          'UPDATE users SET name = ? WHERE email = ?',
          ['Admin', 'admin@example.com']
        );
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n th√†nh c√¥ng');
      }
    }
    
    // 4. Ki·ªÉm tra JWT token
    console.log('üîÑ ƒêang ki·ªÉm tra JWT token...');
    const [admin] = await connection.query(
      'SELECT * FROM users WHERE email = ?',
      ['admin@example.com']
    );
    
    const payload = {
      user: {
        id: admin[0].id,
        is_admin: true,
        name: admin[0].name || 'Admin'
      }
    };
    
    const token = jwt.sign(
      payload,
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    console.log('‚úÖ T·∫°o JWT token th√†nh c√¥ng:');
    console.log('üîë Token:', token);
    
    // Gi·∫£i m√£ token ƒë·ªÉ ki·ªÉm tra
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('‚úÖ Gi·∫£i m√£ token th√†nh c√¥ng:');
    console.log(decoded);
    
    // 5. Ki·ªÉm tra v√† c·∫≠p nh·∫≠t JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JWT_SECRET trong .env, ƒëang s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh');
    }
    
    console.log('===== HO√ÄN TH√ÄNH KI·ªÇM TRA V√Ä S·ª¨A L·ªñI X√ÅC TH·ª∞C =====');
    console.log('üìù Th√¥ng tin ƒëƒÉng nh·∫≠p admin:');
    console.log('Email: admin@example.com');
    console.log('M·∫≠t kh·∫©u: admin123');
    
    await connection.end();
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

fixAuth(); 